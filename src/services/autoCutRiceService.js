const Student = require("../models/student");
const University = require("../models/university");
const TimeTable = require("../models/time_table");
const timeHelper = require("../helpers/timeHelper");

// Các thời gian cố định cho bữa ăn
const MEAL_TIMES = {
  BREAKFAST: "06:00",
  LUNCH: "11:00",
  DINNER: "17:30",
};

// Tính toán thời gian cần đi trước khi bắt đầu học
const calculateDepartureTime = (startTime, travelTime) => {
  return timeHelper.calculateTravelTime(startTime, travelTime);
};

// Tính toán thời gian về sau khi kết thúc học
const calculateReturnTime = (endTime, travelTime) => {
  return timeHelper.calculateReturnTime(endTime, travelTime);
};

// Kiểm tra xem có cần cắt cơm không
const shouldCutMeal = (departureTime, returnTime, mealTime) => {
  return timeHelper.shouldCutMeal(departureTime, returnTime, mealTime);
};

// Kiểm tra xem có cần cắt cơm dựa trên thời gian học
const shouldCutMealByClassTime = (startTime, endTime, travelTime, mealTime) => {
  // Tính thời gian đi trước khi học
  const departureTime = calculateDepartureTime(startTime, travelTime);
  // Tính thời gian về sau khi học
  const returnTime = calculateReturnTime(endTime, travelTime);

  // Kiểm tra xem bữa ăn có bị ảnh hưởng không
  return shouldCutMeal(departureTime, returnTime, mealTime);
};

// Xác định loại bữa ăn dựa trên thời gian
const getMealType = (timeString) => {
  const timeMinutes = timeHelper.timeToMinutes(timeString);
  const breakfastMinutes = timeHelper.timeToMinutes(MEAL_TIMES.BREAKFAST);
  const lunchMinutes = timeHelper.timeToMinutes(MEAL_TIMES.LUNCH);
  const dinnerMinutes = timeHelper.timeToMinutes(MEAL_TIMES.DINNER);

  if (timeMinutes <= breakfastMinutes + 60) return "breakfast";
  if (timeMinutes <= lunchMinutes + 60) return "lunch";
  if (timeMinutes <= dinnerMinutes + 60) return "dinner";
  return null;
};

// Tạo lịch cắt cơm tự động
const generateAutoCutRiceSchedule = async (studentId) => {
  try {
    const student = await Student.findById(studentId).populate("university");
    if (!student) {
      throw new Error("Không tìm thấy sinh viên");
    }

    // Lấy thông tin organization từ student
    const Organization = require("../models/organization");
    const organization = await Organization.findOne({
      organizationName: student.organization,
      universityId: student.university,
    });

    // Sử dụng travelTime từ organization, nếu không có thì dùng mặc định
    const travelTime = organization?.travelTime || 45; // Mặc định 45 phút

    console.log(
      `Student: ${student.fullName}, Organization: ${student.organization}, TravelTime: ${travelTime} phút`
    );

    // Lấy lịch học của sinh viên
    const timeTables = await TimeTable.find({
      studentId: student._id,
      status: "active",
    });

    // Khởi tạo lịch cắt cơm cho tuần
    const cutRiceSchedule = {
      monday: { breakfast: false, lunch: false, dinner: false },
      tuesday: { breakfast: false, lunch: false, dinner: false },
      wednesday: { breakfast: false, lunch: false, dinner: false },
      thursday: { breakfast: false, lunch: false, dinner: false },
      friday: { breakfast: false, lunch: false, dinner: false },
      saturday: { breakfast: false, lunch: false, dinner: false },
      sunday: { breakfast: false, lunch: false, dinner: false },
    };

    // Xử lý từng môn học
    timeTables.forEach((timeTable) => {
      const day = timeTable.day;
      const startTime = timeTable.startTime;
      const endTime = timeTable.endTime;

      // Kiểm tra từng bữa ăn
      const meals = [
        { type: "breakfast", time: MEAL_TIMES.BREAKFAST },
        { type: "lunch", time: MEAL_TIMES.LUNCH },
        { type: "dinner", time: MEAL_TIMES.DINNER },
      ];

      meals.forEach((meal) => {
        if (
          shouldCutMealByClassTime(startTime, endTime, travelTime, meal.time)
        ) {
          cutRiceSchedule[day][meal.type] = true;
        }
      });
    });

    return cutRiceSchedule;
  } catch (error) {
    console.error("Error generating auto cut rice schedule:", error);
    throw error;
  }
};

// Cập nhật lịch cắt cơm tự động cho sinh viên
const updateAutoCutRice = async (studentId) => {
  try {
    const cutRiceSchedule = await generateAutoCutRiceSchedule(studentId);

    // Cập nhật vào database
    const student = await Student.findById(studentId);
    if (!student) {
      throw new Error("Không tìm thấy sinh viên");
    }

    // Tìm và cập nhật hoặc tạo mới lịch cắt cơm
    const existingCutRice = student.cutRice.find(
      (schedule) => schedule.isAutoGenerated === true
    );

    if (existingCutRice) {
      // Cập nhật lịch hiện có
      Object.assign(existingCutRice, cutRiceSchedule);
      existingCutRice.lastUpdated = new Date();
    } else {
      // Tạo lịch mới
      const newCutRiceSchedule = {
        ...cutRiceSchedule,
        isAutoGenerated: true,
        lastUpdated: new Date(),
        notes: "Tự động tạo dựa trên lịch học",
      };
      student.cutRice.push(newCutRiceSchedule);
    }

    await student.save();
    return cutRiceSchedule;
  } catch (error) {
    console.error("Error updating auto cut rice:", error);
    throw error;
  }
};

// Reset về lịch cắt cơm tự động
const resetToAutoCutRice = async (studentId) => {
  try {
    const cutRiceSchedule = await generateAutoCutRiceSchedule(studentId);

    // Cập nhật vào database
    const student = await Student.findById(studentId);
    if (!student) {
      throw new Error("Không tìm thấy sinh viên");
    }

    // Tìm lịch cắt cơm hiện tại
    const existingCutRice = student.cutRice.find(
      (schedule) => schedule.isAutoGenerated === true
    );

    if (existingCutRice) {
      // Reset về lịch tự động
      Object.assign(existingCutRice, cutRiceSchedule);
      existingCutRice.lastUpdated = new Date();
      existingCutRice.notes = "Đã reset về lịch tự động";
    } else {
      // Tạo lịch mới nếu chưa có
      const newCutRiceSchedule = {
        ...cutRiceSchedule,
        isAutoGenerated: true,
        lastUpdated: new Date(),
        notes: "Đã reset về lịch tự động",
      };
      student.cutRice.push(newCutRiceSchedule);
    }

    await student.save();
    return cutRiceSchedule;
  } catch (error) {
    console.error("Error resetting auto cut rice:", error);
    throw error;
  }
};

// Tính toán thời gian đi lại tối ưu
const calculateOptimalTravelTime = (universityAddress, studentAddress) => {
  // Có thể tích hợp với Google Maps API hoặc các service khác
  // Hiện tại trả về thời gian mặc định
  return 45; // 45 phút
};

// Kiểm tra xem có cần cập nhật lịch cắt cơm không
const shouldUpdateCutRice = (lastUpdated) => {
  if (!lastUpdated) return true;

  const now = new Date();
  const diffInHours = (now - lastUpdated) / (1000 * 60 * 60);

  // Cập nhật nếu đã quá 24 giờ
  return diffInHours > 24;
};

module.exports = {
  generateAutoCutRiceSchedule,
  updateAutoCutRice,
  resetToAutoCutRice,
  calculateOptimalTravelTime,
  shouldUpdateCutRice,
  MEAL_TIMES,
  calculateDepartureTime,
  calculateReturnTime,
  shouldCutMeal,
  getMealType,
};
